name: Elixir CI - Tests
description: "Runs tests on the codebase."

inputs:
  postgres_image_version:
    description: 'Postgres image version'
    required: true
    default: 'postgres:11'
  postgres_test_password:
    description: 'Postgres test password'
    required: true
  otp:
    type: string
    description: 'OTP version'
    required: true
    default: '25.2.3'
  elixir:
    type: string
    description: 'Elixir version'
    required: true
    default: '1.15.4'

env:
  MIX_ENV: test

permissions:
  contents: read

runs:
  using: "composite"

  services:
    db:
      image: ${{ inputs.postgres_image_version }}
      ports: ['5432:5432']
      env:
        POSTGRES_PASSWORD: ${{ inputs.postgres_test_password }}
      options: >-
        --health-cmd pg_isready
        --health-interval 10s
        --health-timeout 5s
        --health-retries 5

  steps:
    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ inputs.otp }}
        elixir-version: ${{ inputs.elixir }}

    # Step: Check out the code.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step: Setup project and install/cache dependencies.
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        otp: ${{ matrix.otp }}
        elixir: ${{ matrix.elixir }}
      
    # Step: Download project dependencies. If unchanged, uses
    # the cached version.
    - name: Install dependencies
      shell: bash
      run: mix deps.get

    # Step: Compile the project treating any warnings as errors.
    # Customize this step if a different behavior is desired.
    - name: Compiles without warnings
      shell: bash
      run: mix compile --warnings-as-errors

    # Step: Checks Credo rules.
    - name: Check Credo
      shell: bash
      run: mix credo --strict

    # Step: Execute the tests.
    - name: Run tests
      shell: bash
      run: mix test
