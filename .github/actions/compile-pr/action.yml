name: Elixir CI - Compilation
description: "Runs compilation checks on the codebase."

inputs:
  otp:
    type: string
    description: 'OTP version'
    required: true
    default: '26.1.1'
  elixir:
    type: string
    description: 'Elixir version'
    required: true
    default: '1.15.6'

permissions:
  contents: read

runs:
  using: "composite"

  steps:
    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ inputs.otp }}
        elixir-version: ${{ inputs.elixir }}

    # Step: Setup project and install/cache dependencies.
    - name: Install dependencies
      uses: ./.github/actions/install-dependencies
      with:
        otp: ${{ inputs.otp }}
        elixir: ${{ inputs.elixir }}

    # Step: Compile the project treating any warnings as errors.
    # Customize this step if a different behavior is desired.
    - name: Compiles without warnings
      shell: bash
      run: mix compile --warnings-as-errors

    # Step: Check that the checked in code has already been formatted.
    # This step fails if something was found unformatted.
    # Customize this step as desired.
    - name: Check Formatting
      shell: bash
      run: mix format --check-formatted

    # Step: Checks Credo rules.
    - name: Check Credo
      shell: bash
      run: mix credo --strict

    # Step: Run Dialyzer
    - name: Run dialyzer
      shell: bash
      run: mix dialyzer --format github
